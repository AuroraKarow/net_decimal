#pragma once
#ifndef __LIB_BASE__
#define __LIB_BASE__

#include <complex>
#include <chrono>
#include <random>
#include <assert.h>

#define NEUNET_BEGIN    namespace neunet {
#define NEUNET_END      }

#define callback_arg    template<typename arg>
#define callback_args   template<typename arg, typename ... args>

#define ch_str          char *
#define wch_str         wchar_t *
#define ll_ptr          long long *
#define ul_ptr          unsigned long long *
#define lf_ptr          long double *

#define arr_t_v(t, v)   t[sizeof(v) / sizeof(t)] 
#define number_cplx_vld std::is_same_v<std::remove_reference_t<arg>,\
                        std::complex<long double>>
#define number_arg      = std::enable_if_t<std::is_arithmetic_v<\
                          std::remove_reference_t<arg>> ||\
                          number_cplx_vld>

std::default_random_engine lib_rand_e;

#include "net_base.hpp"

#endif